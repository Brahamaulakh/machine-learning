# -----------------------Clustering With K-mean-------------------------
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
# Sample data (replace with your actual data)
data = np.array([[2, 3], [3, 4], [6, 7], [7, 8], [2, 2], [8, 9]])
# Select features (all features in this case)
features = data
# Standardize features (optional but recommended)
scaler = StandardScaler()
scaled_data = scaler.fit_transform(features)
# K-Means parameters
n_clusters = 2 # Experiment with different values
max_iter = 300 # Maximum iterations for convergence
# Create KMeans object
kmeans = KMeans(n_clusters=n_clusters, random_state=0,
max_iter=max_iter)
# Fit the model
kmeans.fit(scaled_data)
# Get cluster labels
labels = kmeans.labels_
# Get cluster centers
centroids = kmeans.cluster_centers_
# Plotting
plt.figure(figsize=(8, 6))
# Scatter plot of data points with cluster assignments
plt.scatter(scaled_data[:, 0], scaled_data[:, 1], c=labels, cmap='viridis',
marker='o', edgecolors='k', label='Data Points')
# Scatter plot of cluster centers
plt.scatter(centroids[:, 0], centroids[:, 1], c='red', marker='x', s=100,
label='Cluster Centers')
plt.title('KMeans Clustering')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend()
plt.grid(True)
plt.show()

